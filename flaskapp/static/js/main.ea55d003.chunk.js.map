{"version":3,"sources":["userinput/UserInput.js","App.js","reportWebVitals.js","index.js"],"names":["maxQuestionLength","process","MAX_QUESTION_LENGTH","minBoxLength","MIN_BOX_LENGTH","errorPersistDuration","SearchButton","mirrored","goButtonClass","strLen","Math","max","length","className","style","width","id","size","AnswerRateBar","handleRate","liked","rated","reported","isLiked","isDisliked","onClick","opacity","color","UserInput","onServerResponse","promptType","qid","React","useState","inputText","setInputText","showError","setShowError","isHidden","setIsHidden","setGoButtonClass","timeoutId","setTimeoutId","hiddenTimeoutId","setHiddenTimeoutId","shakeTimeoutId","setShakeTimeoutId","rateState","setRateState","errorMessageRef","useRef","throwInputError","message","current","innerHTML","clearTimeout","setTimeout","errorShakeDuration","onSubmit","se","preventDefault","trim","requestOptions","method","headers","body","JSON","stringify","user_response","fetch","then","data","json","jsonData","error","catch","err","console","log","type","onChange","target","value","maxLength","toString","onKeyDown","keyCode","ref","hidden","prevRateState","sameLikedState","App","questionBoxRef","username","setUsername","setPromptType","blur","setBlur","setQid","answers","setAnswers","reloadButtonClass","setReloadButtonClass","useEffect","window","prompt","sensitive","resp","document","addEventListener","handleInteract","querySelector","focus","nameInput","match","response","status","alignSelf","marginBottom","filter","onMouseEnter","res","onMouseLeave","scrollTo","Object","keys","reverse","map","idx","currQuestion","likes","dislikes","totalResponses","content","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ea55d003.chunk.js","sourcesContent":["import React from \"react\";\r\n// import AnswerRateBar from \"./AnswerRateBar\";\r\nimport { IoMdThumbsUp, IoMdThumbsDown, IoMdFlag } from \"react-icons/io\";\r\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\r\nimport \"./userinput.css\";\r\n\r\nconst maxQuestionLength = process.env.MAX_QUESTION_LENGTH || 60;\r\nconst minBoxLength = process.env.MIN_BOX_LENGTH || 6;\r\n\r\nconst errorPersistDuration = 2000;\r\nconst errorFadeDuration = 500;\r\n\r\nconst errorShakeDuration = 300;\r\n\r\nconst UserInput = ({\r\n  onServerResponse = null,\r\n  style = {},\r\n  promptType = \"a\",\r\n  qid = 0,\r\n}) => {\r\n  const [inputText, setInputText] = React.useState(\"\");\r\n\r\n  const [showError, setShowError] = React.useState(false);\r\n\r\n  const [isHidden, setIsHidden] = React.useState(true);\r\n\r\n  const [goButtonClass, setGoButtonClass] = React.useState(\"go-button\");\r\n\r\n  const [timeoutId, setTimeoutId] = React.useState(null);\r\n\r\n  const [hiddenTimeoutId, setHiddenTimeoutId] = React.useState(null);\r\n\r\n  const [shakeTimeoutId, setShakeTimeoutId] = React.useState(null);\r\n\r\n  const [rateState, setRateState] = React.useState({\r\n    rated: false,\r\n    liked: false,\r\n    reported: false,\r\n  });\r\n\r\n  const errorMessageRef = React.useRef();\r\n\r\n  const handleUserType = (se) => {\r\n    setInputText(se.target.value);\r\n  };\r\n\r\n  // The rating system is controlled by the rateState state\r\n  const handleRate = (data) => {\r\n    // if reported is passed in as true, then it means the user has clicked\r\n    // the report button\r\n    if (data.reported) {\r\n      setRateState((prevRateState) => {\r\n        const rated = prevRateState.rated;\r\n        const liked = prevRateState.liked;\r\n        const reported = !prevRateState.reported;\r\n        return { rated: rated, liked: liked, reported: reported };\r\n      });\r\n    }\r\n    // if it's not the report button then it must either be the like or dislike\r\n    // button\r\n    else {\r\n      setRateState((prevRateState) => {\r\n        // if the user's already rated and this rating is the same as the rating\r\n        // stored in the rateState, that means the user wants to cancel that rating\r\n        // by clicking the same button twice, so we should change rated to false\r\n        // and liked to false\r\n\r\n        const sameLikedState = prevRateState.liked === data.liked;\r\n\r\n        if (prevRateState.rated && sameLikedState) {\r\n          const rated = !prevRateState.rated;\r\n          const liked = false;\r\n          const reported = prevRateState.reported;\r\n\r\n          return { rated: rated, liked: liked, reported: reported };\r\n        } else {\r\n          // else the user is trying to like/dislike something for the first time and\r\n          // this should trigger the default behaviour of setting rated to false and\r\n          // liked to whatever the user passed in\r\n          const liked = data.liked;\r\n          const rated = true;\r\n          const reported = prevRateState.reported;\r\n\r\n          return { rated: rated, liked: liked, reported: reported };\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const throwInputError = (message = \"Error\") => {\r\n    errorMessageRef.current.innerHTML = message;\r\n\r\n    setGoButtonClass(\"go-button error\");\r\n    setShowError(true);\r\n    setIsHidden(false);\r\n\r\n    // if (shakeTimeoutId) clearTimeout(shakeTimeoutId);\r\n\r\n    if (timeoutId) clearTimeout(timeoutId);\r\n\r\n    if (hiddenTimeoutId) clearTimeout(hiddenTimeoutId);\r\n\r\n    if (!shakeTimeoutId) {\r\n      setShakeTimeoutId(\r\n        setTimeout(() => {\r\n          setShakeTimeoutId(null);\r\n          setGoButtonClass(\"go-button\");\r\n        }, errorShakeDuration + 5)\r\n      );\r\n    }\r\n    setTimeoutId(\r\n      setTimeout(() => {\r\n        setTimeoutId(null);\r\n        setShowError(false);\r\n      }, errorPersistDuration)\r\n    );\r\n\r\n    setHiddenTimeoutId(\r\n      setTimeout(() => {\r\n        setIsHidden(true);\r\n        setHiddenTimeoutId(null);\r\n      }, errorPersistDuration + errorFadeDuration)\r\n    );\r\n  };\r\n  /**\r\n   * @param  {} se\r\n   *\r\n   * Takes in a submit event, shows an error message and start a timeout for when\r\n   * the error message needs to be hidden again. In the case where a previous timeout\r\n   * already exists, replace it with a new timeout to restart the timer\r\n   */\r\n  const handleUserSubmit = (se) => {\r\n    se.preventDefault();\r\n\r\n    if (inputText.trim().length < 2) {\r\n      throwInputError(\"Please enter more than 1 character\");\r\n    } else {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          user_response: inputText,\r\n          qid: qid,\r\n          rated: rateState.rated,\r\n          liked: rateState.liked,\r\n          reported: rateState.reported,\r\n        }),\r\n      };\r\n\r\n      fetch(\"/api/questions\", requestOptions)\r\n        // .then((response) => response.json())\r\n        .then((data) =>\r\n          onServerResponse\r\n            ? onServerResponse(data)\r\n            : data.json().then((jsonData) => throwInputError(jsonData.error))\r\n        )\r\n        .catch((err) => console.log(\"Error happened: \" + err));\r\n\r\n      setRateState({ rated: false, liked: false, reported: false });\r\n    }\r\n    setInputText(\"\");\r\n  };\r\n\r\n  /**\r\n   * @param  {} se\r\n   * if the key is a navigation key i.e home, end, arrow keys, etc. they will be\r\n   * prevented from the default behaviour. This is done since the placeholder css\r\n   * cursor cannot move around and reflect the user's navigation\r\n   */\r\n  const handleInputKey = (se) => {\r\n    if (se.keyCode >= 35 && se.keyCode <= 45) {\r\n      se.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-interact-container\" style={style}>\r\n      <form id=\"user-input-container\" onSubmit={handleUserSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          id=\"input-bar\"\r\n          className=\"input-bar\"\r\n          onChange={handleUserType}\r\n          value={inputText}\r\n          maxLength={maxQuestionLength.toString()}\r\n          onKeyDown={handleInputKey}\r\n        />\r\n        <SearchButton mirrored={inputText} goButtonClass={goButtonClass} />\r\n        <div\r\n          className=\"error-message\"\r\n          ref={errorMessageRef}\r\n          hidden={isHidden}\r\n          style={{ opacity: `${+showError}` }}\r\n        ></div>\r\n        <span id=\"word-count\">\r\n          {inputText.length}/{maxQuestionLength}\r\n        </span>\r\n      </form>\r\n      {promptType === \"a\" && (\r\n        <AnswerRateBar\r\n          handleRate={handleRate}\r\n          rateState={rateState}\r\n          rated={rateState.rated}\r\n          liked={rateState.liked}\r\n          reported={rateState.reported}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SearchButton = ({ mirrored = \"\", goButtonClass }) => {\r\n  let strLen = Math.max(\r\n    minBoxLength,\r\n    3 + (mirrored.length / maxQuestionLength) * 35\r\n  );\r\n\r\n  return (\r\n    <button className={goButtonClass} style={{ width: `${strLen}rem` }}>\r\n      <span id=\"mirrored-input\">{mirrored}</span>\r\n      <HiArrowNarrowRight id=\"go-button-icon\" size={30} />\r\n    </button>\r\n  );\r\n};\r\n\r\nconst AnswerRateBar = ({ handleRate, liked, rated, reported }) => {\r\n  // const { rated, liked, reported } = rateState;\r\n\r\n  const isLiked = rated && liked;\r\n  const isDisliked = rated && !liked;\r\n\r\n  return (\r\n    <div className=\"rate-bar\">\r\n      <button\r\n        className=\"rate-option\"\r\n        id=\"like-option\"\r\n        onClick={() => handleRate({ liked: true })}\r\n        style={{ opacity: `${isLiked + 0.3}` }}\r\n      >\r\n        <IoMdThumbsUp className=\"option-icon\" color=\"#27c840\" size={60} />\r\n      </button>\r\n\r\n      <button\r\n        className=\"rate-option\"\r\n        id=\"dislike-option\"\r\n        onClick={() => handleRate({ liked: false })}\r\n        style={{ opacity: `${isDisliked + 0.3}` }}\r\n      >\r\n        <IoMdThumbsDown className=\"option-icon\" color=\"#fe5f57\" size={60} />\r\n      </button>\r\n\r\n      <button\r\n        className=\"rate-option\"\r\n        id=\"report-option\"\r\n        onClick={() => handleRate({ reported: true })}\r\n        style={{ opacity: `${reported + 0.3}` }}\r\n      >\r\n        <IoMdFlag className=\"option-icon\" color=\" #ffbc30\" size={60} />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default UserInput;\r\n","import UserInputArea from \"./userinput/UserInput\";\nimport { IoReloadOutline } from \"react-icons/io5\";\nimport React from \"react\";\nimport \"./app.css\";\n\nfunction App() {\n  const BLUR_AMOUNT = \"5px\";\n  const MAX_NAME_LENGTH = \"20\";\n\n  const questionBoxRef = React.useRef();\n\n  const [username, setUsername] = React.useState(\"\");\n\n  const [promptType, setPromptType] = React.useState(\"a\");\n\n  const [blur, setBlur] = React.useState(true);\n\n  const [qid, setQid] = React.useState(null);\n\n  const [answers, setAnswers] = React.useState({});\n\n  const [reloadButtonClass, setReloadButtonClass] =\n    React.useState(\"reload-button\");\n\n  const handleServerRes = (res) => {\n    if (res.status === 200) {\n      res.json().then((res) => {\n        console.log(res);\n        if (res.promptType === \"a\") {\n          res.sensitive ? setBlur(true) : setBlur(false);\n          questionBoxRef.current.innerHTML = `\"${res.prompt}?\"`;\n          setPromptType(\"a\");\n          setQid(res.qid);\n        } else if (res.promptType === \"q\") {\n          setBlur(false);\n          questionBoxRef.current.innerHTML = `${res.prompt}`;\n          setPromptType(\"q\");\n          setQid(res.qid);\n        }\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    // if (usernameCookie) {\n    //   const decodedCookie = escape(window.atob(usernameCookie));\n    //   const sessionSplits = decodedCookie.split(\":\");\n    //   sessionSplits.find((val, index) => {\n    //     console.log(val);\n    //     if (val.includes(\"username\")) {\n    //       setUsername(sessionSplits[index + 1].split(`,`)[0].replace(`\"`, \"\"));\n    //       return true;\n    //     }\n    //     return false;\n    //   });\n    //   setUsername(usernameCookie.split(\"=\")[1]);\n    // }\n\n    // window.username = \"Evin\";\n    if (window.username) setUsername(window.username);\n\n    if (window.promptType && window.prompt) {\n      setPromptType(window.promptType);\n      setQid(window.qid);\n      if (window.promptType === \"q\")\n        questionBoxRef.current.innerHTML = window.prompt;\n      else questionBoxRef.current.innerHTML = `\"${window.prompt}?\"`;\n    }\n\n    if (window.username && !window.sensitive) setBlur(false);\n\n    fetch(\"/api/answers\")\n      .then((resp) => resp.json().then((data) => setAnswers(data)))\n      .catch(() => console.log(\"QnApp: Failed to fetch answers\"));\n\n    document.addEventListener(\"keydown\", handleInteract);\n\n    document.addEventListener(\"touchend\", (se) => {\n      se.preventDefault();\n      handleInteract(se);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleInteract = (se) => {\n    document.querySelector(\".input-bar\").focus();\n  };\n\n  const handleAnswersReload = (se) => {\n    setReloadButtonClass(\"reload-button disabled\");\n    setTimeout(() => {\n      setReloadButtonClass(\"reload-button\");\n    }, 3000);\n\n    fetch(\"/api/answers\")\n      .then((resp) => resp.json().then((data) => setAnswers(data)))\n      .catch(() => console.log(\"QnApp: Failed to fetch answers\"));\n  };\n\n  const handleNameSubmit = (se) => {\n    se.preventDefault();\n    const nameInput = document.querySelector(\".input-bar\").value.trim();\n\n    if (\n      nameInput.length > 0 &&\n      // !nameInput.match(/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/)\n      !nameInput.match(/[\\p{P}\\p{S}]/u)\n    ) {\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ username: nameInput }),\n      };\n\n      fetch(\"api/name\", requestOptions)\n        .then((response) =>\n          response.status === 200\n            ? setUsername(nameInput)\n            : (document.querySelector(\".name-input-error\").innerHTML =\n                \"Something went wrong trying to connect... Please reload\")\n        )\n        .catch(\n          () =>\n            (document.querySelector(\".name-input-error\").innerHTML =\n              \"Could not connect to server\")\n        );\n    }\n    document.querySelector(\".name-input-error\").hidden = false;\n\n    document.querySelector(\".input-bar\").value = \"\";\n  };\n\n  return (\n    <div className=\"App\">\n      {!username && (\n        <div className=\"name-input-screen\" hidden={username}>\n          <form className=\"name-input-container\" onSubmit={handleNameSubmit}>\n            <span className=\"name-input-prompt\">What is your name?</span>\n            <input\n              className=\"input-bar\"\n              id=\"name-input\"\n              type=\"text\"\n              maxLength={MAX_NAME_LENGTH}\n            />\n            <span className=\"name-input-error\" hidden={true}>\n              Name cannot contain special characters\n            </span>\n          </form>\n        </div>\n      )}\n\n      {username && <div className=\"name-display\">{username}</div>}\n      <div\n        style={{\n          alignSelf: \"center\",\n          marginBottom: \"15rem\",\n          color: \"white\",\n          filter: `blur(${blur ? BLUR_AMOUNT : 0})`,\n        }}\n        onMouseEnter={() => setBlur(false)}\n        ref={questionBoxRef}\n      >\n        *Imagine a question*\n      </div>\n      <UserInputArea\n        style={{ filter: `blur(${username ? 0 : BLUR_AMOUNT})` }}\n        onServerResponse={handleServerRes}\n        promptType={promptType}\n        qid={qid}\n      />\n      <div\n        className=\"answers-tab\"\n        onMouseLeave={(se) => se.target.scrollTo(0, 0)}\n      >\n        <IoReloadOutline\n          className={reloadButtonClass}\n          onClick={handleAnswersReload}\n        />\n        {Object.keys(answers)\n          .reverse()\n          .map((value, idx) => {\n            const currQuestion = answers[`${value}`];\n            const likes = currQuestion.likes;\n            const dislikes = currQuestion.dislikes;\n            const totalResponses =\n              likes + dislikes === 0 ? 2 : likes + dislikes;\n\n            return (\n              <div key={value} className=\"answer-element\">\n                <div className=\"answer-info\">\n                  <b>\"{currQuestion.content}\"</b>: {currQuestion.likes} likes/{\" \"}\n                  {currQuestion.dislikes} dislikes\n                </div>\n                <div\n                  className=\"dislikes-bar response-bar\"\n                  style={{\n                    width: \"35rem\",\n                  }}\n                ></div>\n                <div\n                  className=\"likes-bar response-bar\"\n                  style={{\n                    width: `${\n                      17.5 + ((likes - dislikes) / totalResponses) * 17.5\n                    }rem`,\n                    zIndex: \"20\",\n                  }}\n                ></div>\n                {currQuestion.answers.map((data) => (\n                  <div className=\"question-response\">\"{data}\"</div>\n                ))}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}